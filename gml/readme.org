#+title: The Gutenblog Markup Language
#+date: March 16, 2022
#+options: toc:nil

I want to build a website generator, but first I need a markup
language. I like org-mode and markdown but they each have enough
quirks that I don't want to use them for this project.

For Gutenblog v1 I chose to use raw, unaltered HTML. This was the
simplest to implement and offered the most flexibility for publishing
web pages but it was much less ergonomic than using something like
markdown.

So for Gutenblog v2 I decided to implement my own markup language
called Gutenblog Markup Language, or GML. GML is mostly focused on
block-level elements and defers all inline-styling to HTML.

While it may seem like there are only a few inline styles to consider
(bold, italic, monospace) there are far too many edge-cases around
translating typographical and/or semantic elements out of any
conceivable plain-text representation that it's really not worth it to
use special characters for inline styling when HTML is what we want in
the end anyway.

As a result, GML does not offer its own plain-text inline styling
rules, special characters, etc., nor does it attempt to do any
pre-processing or escaping of the text within the document itself.

However, GML does not make any guarantees about compatibility with
HTML or any other markup format. Instead GML passes all text as it
appears in the document directly into the desired output format
verbatim. This conveniently allows for the use of HTML within GML
documents being exported to HTML.

Of course, GML makes a few exceptions to this rule in order to make
drafting documents for the web a bit more ergonomic, such as
processing hyperlinks and footnotes.

In general, GML is only concerned with organizing a document into
blocks of content and is not opinionated about how you markup the text
within the blocks themselves.

* GML Grammar (BNF)
- ~{rule}~ means ~rule~ is repeatable
- ~[rule]~ means ~rule~ is optional
- ~<rule>~ is a regular rule

** Block Grammar
#+begin_src text
<document> ::= {metadata} {block} <eof>

<metadata> ::= <key> {space} <value> <eol>

<block> ::=
          | <paragraph>
          | <keyword-block>

<keyword-block> ::= <keyword> {space} [arguments] <eol> <content> <empty-line>

<keyword> ::=
            | "%list"
            | "%figure"
            | "%section"
            | "%footnotes"
            | "%blockquote"
#+end_src

** Inline Grammar
#+begin_src text
<content> ::= [text] [footnote] [hyperlink]

<footnote> ::= "[fn:" <number> "]"

<hyperlink> ::= "[[https://" <text> "][" [text] "]]"
#+end_src
